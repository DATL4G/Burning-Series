import kotlin.Boolean;
import kotlin.Int;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE IF NOT EXISTS Series(
    hrefPrimary TEXT NOT NULL PRIMARY KEY,
    href TEXT NOT NULL,
    season INTEGER AS Int,
    seasons TEXT AS List<Int> NOT NULL,
    coverHref TEXT DEFAULT NULL,
    fullTitle TEXT NOT NULL,
    mainTitle TEXT DEFAULT NULL,
    subTitle TEXT DEFAULT NULL,
    isAnime INTEGER AS Boolean NOT NULL DEFAULT 0,
    favoriteSince INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS Episode(
    href TEXT NOT NULL PRIMARY KEY,
    number INTEGER NOT NULL,
    title TEXT NOT NULL,
    length INTEGER NOT NULL DEFAULT 0,
    progress INTEGER NOT NULL DEFAULT 0,
    watching INTEGER AS Boolean NOT NULL DEFAULT 0,
    finished INTEGER AS Boolean NOT NULL DEFAULT 0,
    blurHash TEXT DEFAULT NULL,
    updatedAt INTEGER AS Instant NOT NULL DEFAULT 0,
    seriesHref TEXT NOT NULL,
    FOREIGN KEY (seriesHref) REFERENCES Series(hrefPrimary) ON DELETE NO ACTION
);

insertSeriesOrIgnore:
INSERT OR IGNORE INTO Series(
    hrefPrimary,
    href,
    season,
    seasons,
    coverHref,
    fullTitle,
    mainTitle,
    subTitle,
    isAnime,
    favoriteSince
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

favoriteSeries:
SELECT * FROM Series WHERE favoriteSince > 0 ORDER BY favoriteSince DESC;

upsertSeriesFavoriteSince {
    UPDATE Series SET favoriteSince = :since WHERE hrefPrimary = :hrefPrimary OR hrefPrimary LIKE :hrefPrimary;

    INSERT OR IGNORE INTO Series(hrefPrimary, href, season, seasons, coverHref, fullTitle, mainTitle, subTitle, isAnime, favoriteSince) VALUES (:hrefPrimary, :href, :season, :seasons, :coverHref, :fullTitle, :mainTitle, :subTitle, :isAnime, :since);
}

seriesIsFavoriteByHref:
SELECT favoriteSince > 0 FROM Series WHERE hrefPrimary = :hrefPrimary OR hrefPrimary LIKE :hrefPrimary;