CREATE TABLE IF NOT EXISTS DBSeries(
    hrefTitle TEXT NOT NULL PRIMARY KEY,
    href TEXT NOT NULL,
    title TEXT NOT NULL,
    coverHref TEXT,
    favoriteSince INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS DBEpisode(
    href TEXT NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    length INTEGER NOT NULL,
    watchProgress INTEGER NOT NULL,
    lastWatched INTEGER NOT NULL,
    watchHref TEXT,
    seriesHref TEXT NOT NULL,
    FOREIGN KEY (seriesHref) REFERENCES DBSeries(hrefTitle) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS DBHoster(
    name TEXT NOT NULL PRIMARY KEY,
    position INTEGER AS Int DEFAULT NULL
);

selectAllSeries:
SELECT * FROM DBSeries;

selectSeriesByHref:
SELECT * FROM DBSeries WHERE hrefTitle = :href OR hrefTitle LIKE :href;

selectLatestSeriesAmount:
SELECT DBSeries.*
FROM DBSeries
INNER JOIN (SELECT * FROM DBEpisode WHERE lastWatched = (SELECT MAX(lastWatched) FROM DBEpisode)) AS episode
ON DBSeries.hrefTitle = episode.seriesHref OR DBSeries.hrefTitle LIKE episode.seriesHref
WHERE episode.lastWatched > 0 ORDER BY episode.lastWatched DESC LIMIT :amount;

selectLatestFavoritesAmount:
SELECT * FROM DBSeries WHERE favoriteSince > 0 ORDER BY favoriteSince DESC LIMIT :amount;

selectFavorites:
SELECT * FROM DBSeries WHERE favoriteSince > 0 ORDER BY favoriteSince DESC;

favoritesExists:
SELECT EXISTS (SELECT * FROM DBSeries WHERE favoriteSince > 0);

insertSeries:
INSERT OR REPLACE INTO DBSeries(hrefTitle, href, title, coverHref, favoriteSince)
VALUES (?, ?, ?, ?, ?);

insertSeriesIfNotExists:
INSERT OR IGNORE INTO DBSeries(hrefTitle, href, title, coverHref, favoriteSince)
VALUES (?, ?, ?, ?, ?);

updateSeriesHref:
UPDATE DBSeries SET href = :href WHERE hrefTitle = :hrefTitle OR hrefTitle LIKE :hrefTitle;

deleteSeries:
DELETE FROM DBSeries WHERE hrefTitle = :hrefTitle;

selectEpisodeByHref:
SELECT * FROM DBEpisode WHERE href = :href OR href LIKE :href;

selectEpisodesBySeriesHref:
SELECT * FROM DBEpisode WHERE seriesHref = :href OR seriesHref LIKE :href;

selectLatestEpisodesAmount:
SELECT DBSeries.*, episode.title AS "episodeTitle", episode.href AS "episodeHref"
FROM DBSeries
INNER JOIN (SELECT * FROM DBEpisode WHERE lastWatched = (SELECT MAX(lastWatched) FROM DBEpisode)) AS episode
ON DBSeries.hrefTitle = episode.seriesHref OR DBSeries.hrefTitle LIKE episode.seriesHref
WHERE episode.lastWatched > 0 ORDER BY episode.lastWatched DESC LIMIT :amount;

insertEpisode:
INSERT OR IGNORE INTO DBEpisode(href, title, length, watchProgress, lastWatched, watchHref, seriesHref)
VALUES (?, ?, ?, ?, ?, ?, ?);

updateEpisodeWatchProgress:
UPDATE DBEpisode SET watchProgress = :position WHERE href = :href OR href LIKE :href;

updateEpisodeLength:
UPDATE DBEpisode SET length = :length WHERE href = :href OR href LIKE :href;

updateEpisodeLastWatched:
UPDATE DBEpisode SET lastWatched = :time WHERE href = :href OR href LIKE :href;

updateEpisodeLengthAndProgress:
UPDATE DBEpisode SET watchProgress = :progress, length = :length WHERE href = :href OR href LIKE :href;

updateEpisodeWatchHref:
UPDATE DBEpisode SET watchHref = :watchHref WHERE href = :href OR href LIKE :href;

selectAllHosters:
SELECT * FROM DBHoster;

insertHoster:
INSERT OR IGNORE INTO DBHoster(name)
VALUES (?);

updateHosterPosition:
UPDATE DBHoster SET position = :position WHERE name = :name OR name LIKE :name;

hostersSorted:
SELECT EXISTS (SELECT * FROM DBHoster WHERE position NOT NULL);

massUpdateEpisode:
UPDATE DBEpisode SET watchProgress = :progress, length = :length WHERE href IN :list;
